{"version":3,"sources":["logo.svg","components/Navigation/Navigation.tsx","environments/environments.ts","helpers/getDamageTypes.ts","helpers/getRegexCollection.ts","services/Dnd5eApiClient.ts","helpers/getEnvironmentDetails.ts","services/TextFormatClient.tsx","components/SearchableInput/SearchableInput.tsx","hooks/useFuzzyMatching.tsx","components/SpellCard/SpellCard.tsx","components/ExpandoCardText/ExpandoCardText.tsx","components/SpellRequirements/SpellRequirements.tsx","hooks/useSpellRequirements.tsx","components/GenericTable/GenericTable.tsx","components/SpecialText/SpecialText.tsx","pages/Search/GenericSearchPage.tsx","hooks/useSpellList.tsx","hooks/useSpell.tsx","App.tsx","reportWebVitals.ts","configureStore.ts","index.tsx","reducers/index.ts"],"names":["Navigation","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","className","environments","local","dd5eApi","iconFinderApiKey","process","parsedRegexDamageTypes","join","regexCollection","re","options","tag","description","examples","RegExp","Dnd5eApiClient","baseApiUrl","this","setIsLoading","setError","setData","fetchData","then","data","results","catch","error","message","finally","urlRef","url","fetch","res","json","TextFormatClient","text","currentBackgroundColor","setBackgroundColor","wordCount","split","length","indexOf","replace","parseToReactElement","textCopy","forEach","regexEntry","replaceAll","match","result","determineSpecialTextBlocks","map","entry","test","SpecialText","subText","SearchableInput","placeholderText","searchOptions","suggestionKey","handleSelect","useState","suggestions","setSuggestions","searchValue","setSearchValue","fuzzySearchResults","haystack","valueToMatch","keys","setFuzzySearchResults","useEffect","searcher","FuzzySearch","sort","search","useFuzzyMatching","inputProps","placeholder","value","onChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","onClick","onTouchEnd","multiSection","SpellCard","spell","spellSelected","backgroundColor","textClient","conditionalDisplay","processedText","desc","processText","firstEntry","shift","spellRitual","ritual","spellLevel","level","ordinal","determineSpellLevel","spellCategory","school","name","Card","Body","Title","Subtitle","SpellRequirements","castingTime","casting_time","range","components","duration","Text","ExpandoCardText","handleSelected","open","setOpen","expandableComponent","textEntry","uuidv4","Collapse","in","id","aria-controls","aria-expanded","params","contentDetails","setCastingTime","setRange","setComponents","setDuration","setSchool","imageUrl","setImageUrl","useSpellRequirements","tableContent","mapToContent","GenericTable","headings","toString","changeCase","standardContent","content","Table","bordered","striped","style","fontSize","createSpecialTextElement","GenericSearchPage","index","setSpellSelected","spellList","setSpellList","isSpellListLoading","spellListError","apiClient","getSpellList","useSpellList","setSpell","isSpellLoading","spellError","getSpell","useSpell","inputOptions","Container","fluid","Row","Col","Spinner","animation","role","App","require","config","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","store","preloadedState","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","configureStore","ApolloClient","uri","REACT_APP_GRAPHQL_API","cache","InMemoryCache","ReactDOM","component","document","getElementById"],"mappings":"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","file":"static/js/main.44e1f5b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport logo from '../../logo.svg';\n\nexport function Navigation() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">\n                <img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" /> D&D 5E Companion\n            </Navbar.Brand>\n        </Navbar>\n    );\n}\n","export interface Environments {\n    local: Config;\n}\n\nexport interface Config {\n    dd5eApi: string;\n    iconFinderApiKey: string;\n}\n\nconst local: Config = {\n    dd5eApi: 'https://www.dnd5eapi.co',\n    iconFinderApiKey: process.env.REACT_APP_ICON_FINDER_API_KEY as string,\n};\n\nexport const environments: Environments = {\n    local,\n};\n","export const damageTypes = [\n    'acid',\n    'bludgeoning',\n    'cold',\n    'fire',\n    'force',\n    'lightning',\n    'necrotic',\n    'piercing',\n    'poison',\n    'psychic',\n    'radiant',\n    'slashing',\n    'thunder'\n]\n\nexport interface DamageTypeCategory {\n    type: string;\n    textColor: string;\n}\n\nexport const damageTypesByCategory: DamageTypeCategory[] = [\n    {\n        type: 'acid',\n        textColor: '#81BA49',\n    },\n    {\n        type: 'bludgeoning',\n        textColor: '#43464b',\n    },\n    {\n        type: 'cold',\n        textColor: '#1184e8',\n    },\n    {\n        type: 'fire',\n        textColor: '#ce2029',\n    },\n    {\n        type: 'force',\n        textColor: '#035096',\n    },\n    {\n        type: 'lightning',\n        textColor: '#ffbf1f',\n    },\n    {\n        type: 'necrotic',\n        textColor: '#ff0033',\n    },\n    {\n        type: 'piercing',\n        textColor: '#43464b',\n    },\n    {\n        type: 'poison',\n        textColor: '#7f01fe',\n    },\n    {\n        type: 'psychic',\n        textColor: '#ec3b83',\n    },\n    {\n        type: 'radiant',\n        textColor: '#ffff00',\n    },\n    {\n        type: 'slashing',\n        textColor: '#43464b',\n    },\n    {\n        type: 'thunder',\n        textColor: '#009999',\n    },\n]\n\nexport const parsedRegexDamageTypes = damageTypes.join('|');","import { damageTypes, damageTypesByCategory, parsedRegexDamageTypes } from './getDamageTypes';\n\nexport type TagOptions = 'b';\n\nexport interface TextFormatOptions {\n    tag: TagOptions;\n}\n\nexport interface RegExCollection {\n    re: RegExp;\n    options: TextFormatOptions;\n    description?: string;\n    examples?: string;\n}\n\nfunction omitUnderscoredWordsRegex(text: string): RegExp {\n    return new RegExp(`(?<!_)${text}(?!_)`, 'gi');\n}\n\nexport const regexCollection: RegExCollection[] = [\n    {\n        re: /(?<!_)(?:AC\\\\s[1-9]\\d?|\\d{1,3}d\\d{1,3})(?!_)/gi,\n        options: { tag: 'b'},\n        description: 'bold only',\n        examples: 'AC 20, AC 5, 1d10, 4d4, etc.',\n    },\n    {\n        re: new RegExp(`(?<!_)(?:(${parsedRegexDamageTypes})\\\\sdamage)(?!_)`, 'gi'),\n        options: { tag: 'b'},\n        description: 'bold & color',\n        examples: 'acid damage',\n    },\n];\n","import { Dnd5eApiPreview, CommonFetchHookInputs, GraphqlLikeResponse, Spell, GetSpellParams } from '../interfaces';\nimport { getEnvironmentDetails } from '../helpers';\n\nexport interface IDnd5eApiClient {\n    getSpellList(inputs: CommonFetchHookInputs): void;\n    getSpell(inputs: GetSpellParams): void;\n}\n\nexport class Dnd5eApiClient implements IDnd5eApiClient {\n    constructor() {\n        this.baseApiUrl = getEnvironmentDetails().dd5eApi;\n    }\n\n    baseApiUrl: string;\n\n    public getSpellList({ setIsLoading, setError, setData }: CommonFetchHookInputs): void {\n        const spellList = '/api/spells';\n        this.fetchData<GraphqlLikeResponse<Dnd5eApiPreview>>(`${this.baseApiUrl}${spellList}`)\n            .then((data: GraphqlLikeResponse<Dnd5eApiPreview>) => {\n                setData(data.results);\n            })\n            .catch((error) => {\n                setError(error.message);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }\n\n    public getSpell({ setIsLoading, setError, setData, urlRef }: GetSpellParams): void {\n        this.fetchData<Spell>(`${this.baseApiUrl}${urlRef}`)\n            .then((data) => {\n                setData(data);\n            })\n            .catch((error) => setError(error.message))\n            .finally(() => setIsLoading(false));\n    }\n\n    private fetchData<DataType>(url: string): Promise<DataType> {\n        return fetch(url).then((res) => res.json());\n    }\n}\n","import { Config, Environments, environments } from '../environments/environments';\n\nexport const getEnvironmentDetails = (): Config => {\n    const env = ((process.env.REACT_APP_ENV as string) as keyof Environments) || ('local' as keyof Environments);\n\n    return environments[env];\n};\n","import React, { ReactElement } from 'react';\nimport { SpecialText } from '../components';\nimport { regexCollection } from '../helpers';\n\nexport interface IProcessText {\n    text: string;\n    currentBackgroundColor: string;\n    setBackgroundColor: Function;\n}\n\nexport interface ITextFormatClient {\n    processText(params: IProcessText): ReactElement;\n}\n\nexport class TextFormatClient implements ITextFormatClient {\n    public processText({ text, currentBackgroundColor, setBackgroundColor }: IProcessText): ReactElement {\n        const boldOn = [1, 2];\n        const wordCount = text.split(' ').length;\n\n        if (boldOn.indexOf(wordCount) >= 0) {\n            return (\n                <span>\n                    <b>{`${text.replace('.', '')}`}</b>\n                </span>\n            );\n        }\n\n        return this.parseToReactElement(text, currentBackgroundColor, setBackgroundColor);\n    }\n\n    private determineSpecialTextBlocks(text: string) {\n        let textCopy = text;\n        regexCollection.forEach((regexEntry) => {\n            textCopy = textCopy.replaceAll(regexEntry.re, (match: string) => {\n                return `_${match}_`;\n            });\n        });\n\n        return textCopy;\n    }\n\n    private parseToReactElement(text: string, currentBackgroundColor: string, setBackgroundColor: Function): ReactElement {\n        const textCopy = this.determineSpecialTextBlocks(text);\n        const result = textCopy.split('_').map((entry: string) => {\n            for (const regexEntry of regexCollection) {\n                if (regexEntry.re.test(entry)) {\n                    return (\n                        <SpecialText\n                            subText={entry}\n                            tag={regexEntry.options.tag}\n                        />\n                    );\n                }\n            }\n            return <span>{entry}</span>;\n        });\n\n        return <>{result}</>;\n    }\n}\n","import React, { useState } from 'react';\nimport './SearchableInput.scss';\nimport Autosuggest from 'react-autosuggest';\nimport { useFuzzyMatching, UseFuzzyMatchingProps } from '../../hooks';\n\nexport interface SearchableToggleProps<RawDataShape> {\n    placeholderText: string;\n    searchOptions: UseFuzzyMatchingProps<RawDataShape>;\n    suggestionKey: string;\n    handleSelect: Function;\n}\n\nexport function SearchableInput<SuggestionShape, RawDataShape>({\n    placeholderText,\n    searchOptions,\n    suggestionKey,\n    handleSelect,\n}: SearchableToggleProps<RawDataShape>) {\n    const [suggestions, setSuggestions] = useState<SuggestionShape[]>([]);\n    const [searchValue, setSearchValue] = useState('');\n    const fuzzySearchResults = useFuzzyMatching<SuggestionShape, RawDataShape>({ ...searchOptions, valueToMatch: searchValue });\n\n    const getSuggestionValue = (suggestion: SuggestionShape) => {\n        return (suggestion[suggestionKey as keyof SuggestionShape] as unknown) as string;\n    };\n\n    const onSuggestionsFetchRequested = () => {\n        setSuggestions(fuzzySearchResults);\n    };\n\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    const renderSuggestion = (suggestion: SuggestionShape) => {\n        return (\n            <div onClick={() => handleSelect(suggestion)} onTouchEnd={() => handleSelect(suggestion)}>\n                {suggestion[suggestionKey as keyof SuggestionShape]}\n            </div>\n        );\n    };\n\n    const inputProps = {\n        placeholder: placeholderText,\n        value: searchValue,\n        onChange: (_: any, { newValue }: { newValue: string }) => {\n            setSearchValue(newValue);\n        },\n    };\n\n    return (\n        <div className=\"w-100 d-flex justify-content-center\">\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n                multiSection={false}\n            />\n        </div>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport FuzzySearch from 'fuzzy-search';\n\nexport interface UseFuzzyMatchingProps<RawDataShape> {\n    haystack: RawDataShape[];\n    valueToMatch?: string;\n    keys: string[];\n}\n\nexport function useFuzzyMatching<SuggestionShape, RawDataShape>({ haystack, valueToMatch, keys }: UseFuzzyMatchingProps<RawDataShape>) {\n    const [fuzzySearchResults, setFuzzySearchResults] = useState<SuggestionShape[]>([]);\n\n    useEffect(() => {\n        const defaultSearcherOptions = {\n            sort: true,\n        };\n        const searcher = new FuzzySearch((haystack as unknown) as object[], keys, defaultSearcherOptions);\n        setFuzzySearchResults((searcher.search(valueToMatch) as unknown) as SuggestionShape[]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [valueToMatch]);\n\n    return fuzzySearchResults;\n}\n","import React, {ReactElement, useState} from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Dnd5eApiPreview, Spell } from '../../interfaces';\nimport { ExpandoCardText, SpellRequirements } from '..';\nimport ordinal from 'ordinal';\nimport { TextFormatClient } from '../../services';\nimport { useFontAndBackgroundColors } from '../../hooks/useFontAndBackgroundColors';\n\nexport interface SpellCardParams {\n    spell: Spell;\n    spellSelected: Dnd5eApiPreview;\n}\n\nfunction determineSpellLevel(spell: Spell): string {\n    if (spell) {\n        if (spell.level > 0) {\n            return `${ordinal(spell?.level)}-level`;\n        }\n        return 'Cantrip';\n    }\n\n    return '';\n}\n\nexport function SpellCard({ spell, spellSelected }: SpellCardParams) {\n    const [backgroundColor, setBackgroundColor] = useState('white');\n    const textClient = new TextFormatClient();\n    const conditionalDisplay = spell ? 'd-block' : 'd-none';\n    const processedText: ReactElement[] =\n        spell?.desc.map((text) => textClient.processText({ text, currentBackgroundColor: backgroundColor, setBackgroundColor })) || [];\n    const firstEntry = processedText?.shift() || '';\n    const spellRitual = spell && spell.ritual ? ' (ritual)' : '';\n    const spellLevel = determineSpellLevel(spell);\n    const spellCategory = spell ? `${spellLevel} ${spell.school.name}${spellRitual}` : '';\n\n    return (\n        <Card className={`${conditionalDisplay} mx-3 mt-2 w-100`}>\n            {conditionalDisplay === 'd-block' && (\n                <Card.Body className={`${backgroundColor}`}>\n                    <Card.Title>{spell?.name || ''}</Card.Title>\n                    <Card.Subtitle className=\"mb-2\">{spellCategory}</Card.Subtitle>\n                    <SpellRequirements\n                        castingTime={spell?.casting_time || ''}\n                        range={spell?.range || ''}\n                        components={spell?.components || []}\n                        duration={spell?.duration || ''}\n                        school={spell?.school.name || ''}\n                    />\n                    <Card.Text className=\"text-justify\">{firstEntry}</Card.Text>\n                    {processedText.length ? <ExpandoCardText handleSelected={spellSelected} text={processedText} /> : null}\n                </Card.Body>\n            )}\n        </Card>\n    );\n}\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { Card, Collapse } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface IExpandoCardText<SelectedDataShape> {\n    text: ReactElement[];\n    handleSelected: SelectedDataShape;\n}\n\nexport function ExpandoCardText<SelectedDataShape>({ text, handleSelected }: IExpandoCardText<SelectedDataShape>) {\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        setOpen(false);\n    }, [handleSelected]);\n\n    const expandableTextEntry = (textEntry: ReactElement) => (\n        <Card.Text className=\"text-justify\" key={uuidv4()}>\n            {textEntry}\n        </Card.Text>\n    );\n    const expandableComponent = text.map((entry) => expandableTextEntry(entry));\n\n    return (\n        <>\n            <Collapse in={open}>\n                <div className=\"mb-0\" id=\"example-collapse-text\">\n                    {expandableComponent}\n                </div>\n            </Collapse>\n            <div className=\"d-flex justify-content-end\">\n                <button\n                    className=\"text-justify mt-3 text-muted anchorButton cursorHover\"\n                    onClick={() => setOpen(!open)}\n                    aria-controls=\"example-collapse-text\"\n                    aria-expanded={open}\n                >\n                    <span>{open ? 'Hide' : 'Read more'}</span>\n                </button>\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport { Content, GenericTable } from '..';\nimport { ContentDetails, useSpellRequirements } from '../../hooks/useSpellRequirements';\nimport {BaseFontColor} from \"../../hooks/useFontAndBackgroundColors\";\n\nexport interface ISpellRequirements {\n    castingTime: string;\n    range: string;\n    components: string[];\n    duration: string;\n    school: string;\n}\n\nexport function SpellRequirements(params: ISpellRequirements) {\n    const contentDetails = useSpellRequirements(params);\n    const tableHeadings = ['Casting Time', 'Components', 'Duration', 'Range', 'School'];\n    const tableContent: Content[] = mapToContent(contentDetails);\n\n    return <GenericTable headings={tableHeadings} tableContent={tableContent} />;\n}\n\nconst mapToContent = (params: ContentDetails): Content[] => {\n    return [\n        {\n            text: params.castingTime,\n        },\n        {\n            text: params.components.toString(),\n        },\n        {\n            text: params.duration,\n        },\n        {\n            text: params.range,\n        },\n        {\n            text: params.school,\n        },\n    ];\n};\n","import { useEffect, useState } from 'react';\nimport { ISpellRequirements } from '../components';\n\nexport interface ContentDetails extends ISpellRequirements {\n    imageUrl: string;\n}\n\nexport function useSpellRequirements(params: ISpellRequirements): ContentDetails {\n    const [castingTime, setCastingTime] = useState('');\n    const [range, setRange] = useState('');\n    const [components, setComponents] = useState<string[]>([]);\n    const [duration, setDuration] = useState('');\n    const [school, setSchool] = useState('');\n    const [imageUrl, setImageUrl] = useState('');\n\n    useEffect(() => {\n        if (params.school) {\n            setCastingTime(params.castingTime);\n            setRange(params.range);\n            setComponents(params.components);\n            setDuration(params.duration);\n            setSchool(params.school);\n            setImageUrl('');\n        }\n    }, [params]);\n\n    return { castingTime, range, components, duration, school, imageUrl };\n}\n","import React, { ReactElement } from 'react';\nimport { Table } from 'react-bootstrap';\nimport * as changeCase from 'change-case';\nimport { v4 as uuidv4 } from 'uuid';\nimport {BaseFontColor} from \"../../hooks/useFontAndBackgroundColors\";\n\nexport interface IGenericTable {\n    headings: string[];\n    tableContent: Content[];\n}\n\nexport interface Content {\n    text: string;\n    imageUrl?: string;\n    customElement?: ReactElement;\n}\n\nexport function GenericTable(params: IGenericTable) {\n    const headings = params.headings.map((entry) => <th key={uuidv4()}>{changeCase.capitalCase(entry)}</th>);\n    const standardContent = params.tableContent.map((content) => <td key={uuidv4()}>{content.text}</td>);\n    return (\n        <Table bordered striped>\n            <thead>\n                <tr>{headings}</tr>\n            </thead>\n            <tbody>\n                <tr>{standardContent}</tr>\n            </tbody>\n        </Table>\n    );\n}\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TagOptions } from '../../helpers';\n\nexport interface ISpecialText {\n    subText: string;\n    tag: TagOptions;\n}\n\nexport function SpecialText({ subText, tag }: ISpecialText) {\n    const createSpecialTextElement = () => {\n        if (tag === 'b') {\n            return <b style={{fontSize: '1.1rem'}}>{subText}</b>;\n        }\n    };\n    return <span key={uuidv4()}>{createSpecialTextElement()}</span>;\n}\n","import React, { useState } from 'react';\nimport './GenericSearchPage.scss';\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\nimport { SearchableInput, SearchableToggleProps } from '../../components';\nimport { useSpellList } from '../../hooks';\nimport { Dnd5eApiPreview, Spell } from '../../interfaces';\nimport { useSpell } from '../../hooks';\nimport { SpellCard } from '../../components';\n\nexport function GenericSearchPage() {\n    const initSpellSelected: Dnd5eApiPreview = {\n        index: 'acid-arrow',\n        name: 'Acid Arrow',\n        url: '/api/spells/acid-arrow',\n    };\n    const [spellSelected, setSpellSelected] = useState<Dnd5eApiPreview>(initSpellSelected);\n    const { spellList, isSpellListLoading, spellListError } = useSpellList();\n    const { spell, isSpellLoading, spellError } = useSpell(spellSelected);\n\n    const inputOptions: SearchableToggleProps<Dnd5eApiPreview> = {\n        suggestionKey: 'name',\n        placeholderText: 'Start by typing a spell...',\n        searchOptions: {\n            haystack: spellList,\n            keys: ['name', 'url'],\n        },\n        handleSelect: (suggestion: Dnd5eApiPreview) => {\n            setSpellSelected(suggestion);\n        },\n    };\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col className=\"mt-3\">\n                    <h3>Spell Search</h3>\n                    <SearchableInput\n                        searchOptions={inputOptions.searchOptions}\n                        placeholderText={inputOptions.placeholderText}\n                        suggestionKey={inputOptions.suggestionKey}\n                        handleSelect={inputOptions.handleSelect}\n                    />\n                    {isSpellListLoading ||\n                        (isSpellLoading && (\n                            <>\n                                <Spinner animation=\"border\" role=\"status\" className=\"mt-3 mr-3\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </Spinner>\n                            </>\n                        ))}\n                </Col>\n            </Row>\n            <Row>\n                <Col className=\"mt-3 d-flex justify-content-center\">\n                    <SpellCard spell={spell as Spell} spellSelected={spellSelected} />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { Dnd5eApiPreview, CommonFetchHookInputs } from '../interfaces';\nimport { Dnd5eApiClient } from '../services';\n\nexport function useSpellList() {\n    const [spellList, setSpellList] = useState<Dnd5eApiPreview[]>([]);\n    const [isSpellListLoading, setIsLoading] = useState(false);\n    const [spellListError, setError] = useState('');\n    const apiClient = new Dnd5eApiClient();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const params: CommonFetchHookInputs = {\n            setIsLoading,\n            setError,\n            setData: setSpellList,\n        };\n        apiClient.getSpellList(params);\n    }, []);\n\n    return { spellList, isSpellListLoading, spellListError };\n}\n","import { useEffect, useState } from 'react';\nimport { Spell, GetSpellParams, Dnd5eApiPreview } from '../interfaces';\nimport { Dnd5eApiClient } from '../services';\n\nexport function useSpell(spellSelected: Dnd5eApiPreview) {\n    const [spell, setSpell] = useState<Spell>();\n    const [isSpellLoading, setIsLoading] = useState(false);\n    const [spellError, setError] = useState('');\n    const apiClient = new Dnd5eApiClient();\n\n    useEffect(() => {\n        if (spellSelected) {\n            setIsLoading(true);\n            const params: GetSpellParams = {\n                setIsLoading,\n                setError,\n                setData: setSpell,\n                urlRef: spellSelected.url,\n            };\n            apiClient.getSpell(params);\n        }\n    }, [spellSelected]);\n\n    return { spell, isSpellLoading, spellError };\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Switch, Route } from 'react-router-dom';\nimport { Navigation } from './components';\nimport { GenericSearchPage } from './pages';\n\nfunction App() {\n    require('dotenv').config();\n\n    return (\n        <Switch>\n            <Route\n                exact\n                path=\"/\"\n                render={() => (\n                    <div className=\"App\">\n                        <Navigation />\n                        <GenericSearchPage />\n                    </div>\n                )}\n            />\n        </Switch>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const history = createBrowserHistory();\n\nexport function configureStore(preloadedState?: any) {\n    return createStore(\n        // @ts-ignore\n        createRootReducer(history), // root reducer with router state\n        preloadedState,\n        composeWithDevTools(\n            applyMiddleware(\n                routerMiddleware(history), // for dispatching history actions\n                thunk\n                // ... other middlewares ...\n            )\n        )\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n// @ts-ignore\nimport { configureStore, history } from './configureStore';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nexport const store = configureStore();\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPHQL_API,\n    cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <Route component={App} />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\n\nexport default (history: History<any>) =>\n    combineReducers({\n        router: connectRouter(history),\n    });\n"],"sourceRoot":""}