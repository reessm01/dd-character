{"version":3,"sources":["logo.svg","components/Navigation/Navigation.tsx","environments/environments.ts","services/Dnd5eApiClient.ts","helpers/getEnvironmentDetails.ts","components/SearchableInput/SearchableInput.tsx","hooks/useFuzzyMatching.tsx","components/SpellCard/SpellCard.tsx","components/ExpandoCardText/ExpandoCardText.tsx","pages/Search/GenericSearchPage.tsx","hooks/useSpellList.tsx","hooks/useSpell.tsx","App.tsx","reportWebVitals.ts","configureStore.ts","index.tsx","reducers/index.ts"],"names":["Navigation","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","className","environments","local","dd5eApi","Dnd5eApiClient","baseApiUrl","this","setIsLoading","setError","setData","fetchData","then","data","results","catch","error","message","finally","urlRef","url","fetch","res","json","SearchableInput","placeholderText","searchOptions","suggestionKey","handleSelect","useState","suggestions","setSuggestions","searchValue","setSearchValue","fuzzySearchResults","haystack","valueToMatch","keys","setFuzzySearchResults","useEffect","searcher","FuzzySearch","sort","search","useFuzzyMatching","inputProps","placeholder","value","onChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","onClick","onTouchEnd","multiSection","SpellCard","spell","conditionalDisplay","firstEntry","desc","text","slice","spellRitual","ritual","spellCategory","ordinal","level","school","name","Card","Body","Title","Subtitle","Text","length","ExpandoCardText","open","setOpen","expandableComponent","map","entry","textEntry","uuidv4","Collapse","in","id","aria-controls","aria-expanded","GenericSearchPage","spellList","setSpellList","isSpellListLoading","spellListError","apiClient","params","getSpellList","useSpellList","index","spellSelected","setSpellSelected","setSpell","isSpellLoading","spellError","getSpell","useSpell","inputOptions","Container","fluid","Row","Col","App","require","config","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","store","preloadedState","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","configureStore","client","ApolloClient","uri","process","REACT_APP_GRAPHQL_API","cache","InMemoryCache","ReactDOM","component","document","getElementById"],"mappings":"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","file":"static/js/main.8afc2dad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport logo from '../../logo.svg';\n\nexport function Navigation() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">\n                <img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" /> D&D 5E Companion\n            </Navbar.Brand>\n        </Navbar>\n    );\n}\n","export interface Environments {\n    local: Config;\n}\n\nexport interface Config {\n    dd5eApi: string;\n}\n\nconst local: Config = {\n    dd5eApi: 'https://www.dnd5eapi.co',\n};\n\nexport const environments: Environments = {\n    local,\n};\n","import { Dnd5eApiPreview, CommonFetchHookInputs, GraphqlLikeResponse, Spell, GetSpellParams } from '../interfaces';\nimport { getEnvironmentDetails } from '../helpers';\n\nexport interface IDnd5eApiClient {\n    getSpellList(inputs: CommonFetchHookInputs): void;\n    getSpell(inputs: GetSpellParams): void;\n}\n\nexport class Dnd5eApiClient implements IDnd5eApiClient {\n    constructor() {\n        this.baseApiUrl = getEnvironmentDetails().dd5eApi;\n    }\n\n    baseApiUrl: string;\n\n    public getSpellList({ setIsLoading, setError, setData }: CommonFetchHookInputs): void {\n        const spellList = '/api/spells';\n        this.fetchData<GraphqlLikeResponse<Dnd5eApiPreview>>(`${this.baseApiUrl}${spellList}`)\n            .then((data: GraphqlLikeResponse<Dnd5eApiPreview>) => {\n                setData(data.results);\n            })\n            .catch((error) => {\n                setError(error.message);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }\n\n    public getSpell({ setIsLoading, setError, setData, urlRef }: GetSpellParams): void {\n        this.fetchData<Spell>(`${this.baseApiUrl}${urlRef}`)\n            .then((data) => {\n                setData(data);\n            })\n            .catch((error) => setError(error.message))\n            .finally(() => setIsLoading(false));\n    }\n\n    private fetchData<DataType>(url: string): Promise<DataType> {\n        return fetch(url).then((res) => res.json());\n    }\n}\n","import { Config, Environments, environments } from '../environments/environments';\n\nexport const getEnvironmentDetails = (): Config => {\n    const env = process.env.REACT_APP_ENV as keyof Environments;\n\n    return environments[env];\n};\n","import React, { useState } from 'react';\nimport './SearchableInput.scss';\nimport Autosuggest from 'react-autosuggest';\nimport { useFuzzyMatching, UseFuzzyMatchingProps } from '../../hooks';\n\nexport interface SearchableToggleProps<RawDataShape> {\n    placeholderText: string;\n    searchOptions: UseFuzzyMatchingProps<RawDataShape>;\n    suggestionKey: string;\n    handleSelect: Function;\n}\n\nexport function SearchableInput<SuggestionShape, RawDataShape>({\n    placeholderText,\n    searchOptions,\n    suggestionKey,\n    handleSelect,\n}: SearchableToggleProps<RawDataShape>) {\n    const [suggestions, setSuggestions] = useState<SuggestionShape[]>([]);\n    const [searchValue, setSearchValue] = useState('');\n    const fuzzySearchResults = useFuzzyMatching<SuggestionShape, RawDataShape>({ ...searchOptions, valueToMatch: searchValue });\n\n    const getSuggestionValue = (suggestion: SuggestionShape) => {\n        return (suggestion[suggestionKey as keyof SuggestionShape] as unknown) as string;\n    };\n\n    const onSuggestionsFetchRequested = () => {\n        setSuggestions(fuzzySearchResults);\n    };\n\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    const renderSuggestion = (suggestion: SuggestionShape) => {\n        return (\n            <div onClick={() => handleSelect(suggestion)} onTouchEnd={() => handleSelect(suggestion)}>\n                {suggestion[suggestionKey as keyof SuggestionShape]}\n            </div>\n        );\n    };\n\n    const inputProps = {\n        placeholder: placeholderText,\n        value: searchValue,\n        onChange: (_: any, { newValue }: { newValue: string }) => {\n            setSearchValue(newValue);\n        },\n    };\n\n    return (\n        <div className=\"w-100 d-flex justify-content-center\">\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n                multiSection={false}\n            />\n        </div>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport FuzzySearch from 'fuzzy-search';\n\nexport interface UseFuzzyMatchingProps<RawDataShape> {\n    haystack: RawDataShape[];\n    valueToMatch?: string;\n    keys: string[];\n}\n\nexport function useFuzzyMatching<SuggestionShape, RawDataShape>({ haystack, valueToMatch, keys }: UseFuzzyMatchingProps<RawDataShape>) {\n    const [fuzzySearchResults, setFuzzySearchResults] = useState<SuggestionShape[]>([]);\n\n    useEffect(() => {\n        const defaultSearcherOptions = {\n            sort: true,\n        };\n        const searcher = new FuzzySearch((haystack as unknown) as object[], keys, defaultSearcherOptions);\n        setFuzzySearchResults((searcher.search(valueToMatch) as unknown) as SuggestionShape[]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [valueToMatch]);\n\n    return fuzzySearchResults;\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Spell } from '../../interfaces';\nimport { ExpandoCardText } from '..';\nimport ordinal from 'ordinal';\n\nexport interface SpellCardParams {\n    spell: Spell;\n}\n\nexport function SpellCard({ spell }: SpellCardParams) {\n    const conditionalDisplay = spell ? 'd-block' : 'd-none';\n    const firstEntry = spell?.desc[0] || '';\n    const text = spell?.desc.slice(1) || [];\n    const spellRitual = spell && spell.ritual ? ' (ritual)' : '';\n    const spellCategory = spell ? `${ordinal(spell?.level)}-level ${spell.school.name}${spellRitual}` : '';\n\n    return (\n        <Card className={`${conditionalDisplay} mx-3 mt-2 w-100`}>\n            {conditionalDisplay === 'd-block' && (\n                <Card.Body>\n                    <Card.Title>{spell?.name || ''}</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">{spellCategory}</Card.Subtitle>\n                    <Card.Text className=\"text-justify\">{firstEntry}</Card.Text>\n                    {text.length ? <ExpandoCardText text={text} /> : null}\n                </Card.Body>\n            )}\n        </Card>\n    );\n}\n","import React, { useState } from 'react';\nimport './ExpandoCardText.scss';\nimport { Button, Card, Collapse } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface IExpandoCardText {\n    text: string[];\n}\n\nexport function ExpandoCardText({ text }: IExpandoCardText) {\n    const [open, setOpen] = useState(false);\n    const expandableTextEntry = (textEntry: string) => (\n        <Card.Text className=\"text-justify\" key={uuidv4()}>\n            {textEntry}\n        </Card.Text>\n    );\n    const expandableComponent = text.map((entry) => expandableTextEntry(entry));\n\n    return (\n        <>\n            <Collapse in={open}>\n                <div className=\"mb-0\" id=\"example-collapse-text\">\n                    {expandableComponent}\n                </div>\n            </Collapse>\n            <div className=\"d-flex justify-content-end\">\n                <a\n                    className=\"text-justify mt-3 text-muted cursor-hover\"\n                    onClick={() => setOpen(!open)}\n                    aria-controls=\"example-collapse-text\"\n                    aria-expanded={open}\n                >\n                    {open ? 'Hide' : 'Read more'}\n                </a>\n            </div>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport './GenericSearchPage.scss';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { SearchableInput, SearchableToggleProps } from '../../components';\nimport { useSpellList } from '../../hooks';\nimport { Dnd5eApiPreview, Spell } from '../../interfaces';\nimport { useSpell } from '../../hooks';\nimport { SpellCard } from '../../components/SpellCard/SpellCard';\n\nexport function GenericSearchPage() {\n    const initSpellSelected: Dnd5eApiPreview = {\n        index: 'acid-arrow',\n        name: 'Acid Arrow',\n        url: '/api/spells/acid-arrow',\n    };\n    const { spellList, isSpellListLoading, spellListError } = useSpellList();\n    const [spellSelected, setSpellSelected] = useState<Dnd5eApiPreview>(initSpellSelected);\n    const { spell, isSpellLoading, spellError } = useSpell(spellSelected);\n\n    const inputOptions: SearchableToggleProps<Dnd5eApiPreview> = {\n        suggestionKey: 'name',\n        placeholderText: 'Start by typing a spell...',\n        searchOptions: {\n            haystack: spellList,\n            keys: ['name', 'url'],\n        },\n        handleSelect: (suggestion: Dnd5eApiPreview) => {\n            setSpellSelected(suggestion);\n        },\n    };\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col className=\"mt-3\">\n                    <h3>Spell Search</h3>\n                    <SearchableInput\n                        searchOptions={inputOptions.searchOptions}\n                        placeholderText={inputOptions.placeholderText}\n                        suggestionKey={inputOptions.suggestionKey}\n                        handleSelect={inputOptions.handleSelect}\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col className=\"mt-3 d-flex justify-content-center\">\n                    <SpellCard spell={spell as Spell} />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { Dnd5eApiPreview, CommonFetchHookInputs } from '../interfaces';\nimport { Dnd5eApiClient } from '../services';\n\nexport function useSpellList() {\n    const [spellList, setSpellList] = useState<Dnd5eApiPreview[]>([]);\n    const [isSpellListLoading, setIsLoading] = useState(false);\n    const [spellListError, setError] = useState('');\n    const apiClient = new Dnd5eApiClient();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const params: CommonFetchHookInputs = {\n            setIsLoading,\n            setError,\n            setData: setSpellList,\n        };\n        apiClient.getSpellList(params);\n    }, []);\n\n    return { spellList, isSpellListLoading, spellListError };\n}\n","import { useEffect, useState } from 'react';\nimport { Spell, GetSpellParams, Dnd5eApiPreview } from '../interfaces';\nimport { Dnd5eApiClient } from '../services';\n\nexport function useSpell(spellSelected: Dnd5eApiPreview) {\n    const [spell, setSpell] = useState<Spell>();\n    const [isSpellLoading, setIsLoading] = useState(false);\n    const [spellError, setError] = useState('');\n    const apiClient = new Dnd5eApiClient();\n\n    useEffect(() => {\n        if (spellSelected) {\n            setIsLoading(true);\n            const params: GetSpellParams = {\n                setIsLoading,\n                setError,\n                setData: setSpell,\n                urlRef: spellSelected.url,\n            };\n            apiClient.getSpell(params);\n        }\n    }, [spellSelected]);\n\n    return { spell, isSpellLoading, spellError };\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Switch, Route } from 'react-router-dom';\nimport { Navigation } from './components';\nimport { GenericSearchPage } from './pages';\n\nfunction App() {\n    require('dotenv').config();\n\n    return (\n        <Switch>\n            <Route\n                exact\n                path=\"/\"\n                render={() => (\n                    <div className=\"App\">\n                        <Navigation />\n                        <GenericSearchPage />\n                    </div>\n                )}\n            />\n        </Switch>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const history = createBrowserHistory();\n\nexport function configureStore(preloadedState?: any) {\n    return createStore(\n        // @ts-ignore\n        createRootReducer(history), // root reducer with router state\n        preloadedState,\n        composeWithDevTools(\n            applyMiddleware(\n                routerMiddleware(history), // for dispatching history actions\n                thunk\n                // ... other middlewares ...\n            )\n        )\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n// @ts-ignore\nimport { configureStore, history } from './configureStore';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nexport const store = configureStore();\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPHQL_API,\n    cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <Route component={App} />\n            </ConnectedRouter>\n        </Provider>\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\n\nexport default (history: History<any>) =>\n    combineReducers({\n        router: connectRouter(history),\n    });\n"],"sourceRoot":""}